intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
#import xxxx_libs += libhello%lib{hello}

lib{auto-symexport}: libul{auto-symexport}: \
  {h c hxx ixx txx cxx }{** -version} hxx{version} $impl_libs $intf_libs

# Export all symbols.
#
if false
{
  libs{auto-symexport}: def{auto-symexport}: include = ($cxx.target.system == 'win32-msvc')
  def{auto-symexport}: libul{auto-symexport}

  if ($cxx.target.system == 'mingw32')
    cxx.loptions += -Wl,--export-all-symbols
}
else
{
  # An alternative setup that uses the .def file even for MinGW.
  #
  if ($cxx.target.class == 'windows')
    using bin.def

  libs{auto-symexport}: def{auto-symexport}: include = ($cxx.target.class == 'windows')
  def{auto-symexport}: libul{auto-symexport}
}

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
hxx{version}: in{version} $src_root/manifest
{
  dist  = true
  clean = ($src_root != $out_root)
}

# Build options.
#
cc.poptions =+ "-I$out_root" "-I$src_root"

{hbmia obja}{*}: cc.poptions += -DLIBAUTO_SYMEXPORT_STATIC_BUILD
{hbmis objs}{*}: cc.poptions += -DLIBAUTO_SYMEXPORT_SHARED_BUILD

# Export options.
#
lib{auto-symexport}:
{
  cc.export.poptions = "-I$out_root" "-I$src_root"
  cc.export.libs = $intf_libs
}

liba{auto-symexport}: cc.export.poptions += -DLIBAUTO_SYMEXPORT_STATIC
libs{auto-symexport}: cc.export.poptions += -DLIBAUTO_SYMEXPORT_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{auto-symexport}: bin.lib.version = @"-$version.project_id"
else
  lib{auto-symexport}: bin.lib.version = @"-$version.major.$version.minor"

# Install into the libauto-symexport/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{h hxx ixx txx}{*}:
{
  install         = include/libauto-symexport/
  install.subdirs = true
}
